# -*- coding: utf-8 -*-
"""cp06-miniprojetopyfund.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VCCFy_IZGaZBKklKwq58FG_htfiqC-Hq

Importação das bibliotecas e da base de dados
"""

from platform import python_version
print('Versão do Python: ', python_version())

!pip install -q imdb-sqlite

!pip install -q pycountry

import re
import time
import sqlite3
import pycountry
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib import cm
from sklearn.feature_extraction.text import CountVectorizer
import warnings
warnings.filterwarnings('ignore')
sns.set_theme(style = 'whitegrid')

# Commented out IPython magic to ensure Python compatibility.
# %%time
# !imdb-sqlite

conn = sqlite3.connect('imdb.db')

tabelas = pd.read_sql_query("select name as 'table_name' from sqlite_master where type = 'table'", conn)

type(tabelas)

tabelas.head()

tabelas = tabelas['table_name'].values.tolist()

for tabela in tabelas:
  consulta = 'pragma table_info({})'.format(tabela)
  resultado = pd.read_sql_query(consulta, conn)
  print('Esquema da tabela: ', tabela)
  display(resultado)
  print('-' * 100)
  print('\n')

"""1ª consulta - Categorias mais comuns"""

consulta1 = '''select type, count(*) as count from titles group by type'''

resultado1 = pd.read_sql_query(consulta1, conn)

display(resultado1)

resultado1['percentual'] = (resultado1['count'] / resultado1['count'].sum()) * 100

display(resultado1)

others = {}

others['count'] = resultado1[resultado1['percentual'] < 5]['count'].sum()

others['percentual'] = resultado1[resultado1['percentual'] < 5]['percentual'].sum()

others['type'] = 'others'

others

resultado1 = resultado1[resultado1['percentual'] > 5]

resultado1 = resultado1.append(others, ignore_index = True)

resultado1 = resultado1.sort_values(by = 'count', ascending = False)

resultado1.head()

labels = [str(resultado1['type'][i])+' '+'['+str(round(resultado1['percentual'][i], 2)) + '%' +']' for i in resultado1.index]

cs = cm.Set3(np.arange(100))

f = plt.figure()

plt.pie(resultado1['count'], labeldistance = 1, radius = 3, colors = cs, wedgeprops = dict(width = 0.8))
plt.legend(labels = labels, loc = 'center', prop = {'size': 12})
plt.title('Distribuição de Títulos', loc = 'Center', fontdict = {'fontsize': 20, 'fontweight': 20})
plt.show()

"""2ª consulta - Títulos por gênero"""

consulta2 = '''select genres, count(*) from titles where type = 'movie' group by genres'''

resultado2 = pd.read_sql_query(consulta2, conn)

display(resultado2)

resultado2['genres'] = resultado2['genres'].str.lower().values

temp = resultado2['genres'].dropna()

padrao = '(?u)\\b[\\w-]+\\b'

vetor = CountVectorizer(token_pattern = padrao, analyzer = 'word').fit(temp)

type(vetor)

bag_generos = vetor.transform(temp)

type(bag_generos)

generos_unicos = vetor.get_feature_names()

generos = pd.DataFrame(bag_generos.todense(), columns = generos_unicos, index = temp.index)

generos.info()

generos = generos.drop(columns = 'n', axis = 0)

generos_percentual = 100 * pd.Series(generos.sum()).sort_values(ascending = False) / generos.shape[0]

generos_percentual.head(10)

plt.figure(figsize = (16, 8))
sns.barplot(x = generos_percentual.values, y = generos_percentual.index, orient = 'h', palette = 'terrain')
plt.ylabel('Gênero')
plt.xlabel('\nPercentual de Filmes (%)')
plt.title('\nNúmero (Percentual) de Títulos por Gênero')
plt.show()

"""3ª consulta - Mediana de avaliação dos filmes por gênero"""

consulta3 = '''
            select rating, genres
            from ratings
            join titles on ratings.title_id = titles.title_id
            where premiered <= 2022 and type = 'movie'
            '''

resultado3 = pd.read_sql_query(consulta3, conn)

display(resultado3)

def retorna_generos(df):
  df['genres'] = df['genres'].str.lower().values
  temp = df['genres'].dropna()
  vetor = CountVectorizer(token_pattern = '(?u)\\b[\\w-]+\\b', analyzer = 'word').fit(temp)
  generos_unicos = vetor.get_feature_names()
  generos_unicos = [genre for genre in generos_unicos if len(genre) > 1]
  return generos_unicos

generos_unicos = retorna_generos(resultado3)

generos_unicos

genero_counts = []
genero_ratings = []

for item in generos_unicos:
  consulta = 'select count(rating) from ratings join titles on ratings.title_id = titles.title_id where genres like '+ '\'' + '%' + item + '%' + '\' and type = \'movie\''
  resultado = pd.read_sql_query(consulta, conn)
  genero_counts.append(resultado.values[0][0])

  consulta = 'select rating from ratings join titles on ratings.title_id = titles.title_id where genres like '+ '\'' + '%' + item + '%' + '\' and type = \'movie\''
  resultado = pd.read_sql_query(consulta, conn)
  genero_ratings.append(np.median(resultado['rating']))

df_genero_ratings = pd.DataFrame()
df_genero_ratings['genres'] = generos_unicos
df_genero_ratings['count'] = genero_counts
df_genero_ratings['rating'] = genero_ratings

df_genero_ratings.head(20)

df_genero_ratings = df_genero_ratings.drop(index = 18)

df_genero_ratings = df_genero_ratings.sort_values(by = 'rating', ascending = False)

plt.figure(figsize = (16, 10))

sns.barplot(y = df_genero_ratings.genres, x = df_genero_ratings.rating, orient = 'h')

for i in range(len(df_genero_ratings.index)):
  plt.text(4.0,
           i + 0.25,
           str(df_genero_ratings['count'][df_genero_ratings.index[i]]) + ' filmes')
  
  plt.text(df_genero_ratings.rating[df_genero_ratings.index[i]],
           i + 0.25,
           round(df_genero_ratings['rating'][df_genero_ratings.index[i]], 2))

plt.ylabel('Gênero')
plt.xlabel('Mediana da Avaliação')
plt.title('\nMediana de Avaliação por Gênero\n')
plt.show()

"""4ª consulta - Mediana de avaliação de filmes em relação ao ano de estreia"""

consulta4 = '''
            select rating as Rating, premiered
            from ratings
            join titles on ratings.title_id = titles.title_id
            where premiered <= 2022 and type = 'movie'
            order by premiered
            '''

resultado4 = pd.read_sql_query(consulta4, conn)

display(resultado4)

ratings = []

for year in set(resultado4['premiered']):
  ratings.append(np.median(resultado4[resultado4['premiered'] == year]['Rating']))

type(ratings)

ratings[1:10]

anos = list(set(resultado4['premiered']))

anos[1:10]

plt.figure(figsize = (16, 8))
plt.plot(anos, ratings)
plt.xlabel('\nAno')
plt.ylabel('Mediana de Avaliação')
plt.title('\nMediana de Avaliação dos Filmes em Relação ao Ano de Estreia')
plt.show()

"""5ª consulta - Quantidade de filmes avaliados por gênero em relação ao ano de estreia"""

consulta5 = '''select genres from titles'''

resultado5 = pd.read_sql_query(consulta5, conn)

display(resultado5)

generos_unicos = retorna_generos(resultado5)

generos_unicos

genero_count = []

for item in generos_unicos:
  consulta = 'select count(*) count from titles where genres like '+ '\'' + '%' + item + '%' + '\' and type = \'movie\' and premiered <= 2022'
  resultado = pd.read_sql_query(consulta, conn)
  genero_count.append(resultado['count'].values[0])

df_genero_count = pd.DataFrame()
df_genero_count['genre'] = generos_unicos
df_genero_count['Count'] = genero_count

df_genero_count = df_genero_count[df_genero_count['genre'] != 'n']
df_genero_count = df_genero_count.sort_values(by = 'Count', ascending = False)
top_generos = df_genero_count.head()['genre'].values

plt.figure(figsize = (16, 8))

for item in top_generos:
  consulta = 'select count(*) Number_of_movies, premiered Year from titles where genres like '+ '\'' + '%' + item + '%' + '\' and type = \'movie\' and Year <= 2022 group by Year'
  resultado = pd.read_sql_query(consulta, conn)
  plt.plot(resultado['Year'], resultado['Number_of_movies'])

plt.xlabel('\nAno')
plt.ylabel('Número de Filmes Avaliados')
plt.title('\nNúmero de Filmes Avaliados por Gênero em Relação ao Ano de Estreia')
plt.legend(labels = top_generos)
plt.show()

"""6ª consulta - Filme de maior duração e cálculo de percentis"""

consulta6 = '''
            select runtime_minutes Runtime
            from titles
            where type = 'movie' and Runtime != 'NaN'
            '''

resultado6 = pd.read_sql_query(consulta6, conn)

display(resultado6)

for i in range(101):
  val = i
  perc = round(np.percentile(resultado6['Runtime'].values, val), 2)
  print('{} percentil da duração (runtime) é: {}'.format(val, perc))

consulta6_1 = '''
              select runtime_minutes Runtime, primary_title
              from titles
              where type = 'movie' and Runtime != 'NaN'
              order by Runtime desc
              limit 1
              '''

resultado6_1 = pd.read_sql_query(consulta6_1, conn)

resultado6_1

"""7ª consulta - Relação entre duração e gênero"""

consulta7 = '''
            select avg(runtime_minutes) Runtime, genres
            from titles
            where type = 'movie' and runtime_minutes != 'NaN'
            group by genres
            '''

resultado7 = pd.read_sql_query(consulta7, conn)

generos_unicos = retorna_generos(resultado7)

generos_unicos

genero_runtime = []

for item in generos_unicos:
  consulta = 'select runtime_minutes Runtime from titles where genres like '+ '\'' + '%' + item + '%' + '\' and type = \'movie\' and Runtime != \'NaN\''
  resultado = pd.read_sql_query(consulta, conn)
  genero_runtime.append(np.median(resultado['Runtime']))

df_genero_runtime = pd.DataFrame()
df_genero_runtime['genre'] = generos_unicos
df_genero_runtime['runtime'] = genero_runtime

df_genero_runtime = df_genero_runtime.drop(index = 18)

dt_genero_runtime = df_genero_runtime.sort_values(by = 'runtime', ascending = False)

plt.figure(figsize = (16, 8))

sns.barplot(y = df_genero_runtime.genre, x = dt_genero_runtime.runtime, orient = 'h')

for i in range(len(df_genero_runtime.index)):
  plt.text(df_genero_runtime.runtime[df_genero_runtime.index[i]],
           i + 0.25,
           round(df_genero_runtime['runtime'][df_genero_runtime.index[i]], 2))

plt.ylabel('Gênero')
plt.xlabel('\nMediana de Tempo de Duração (Minutos)\n')
plt.title('\nRelação entre Duração e Gênero')
plt.show()

"""8ª consulta - Número de filmes produzidos por país"""

consulta8 = '''
            select region, count(*) Number_of_movies
            from akas
            join titles on akas.title_id = titles.title_id
            where region != 'None' and type = \'movie\'
            group by region
            '''

resultado8 = pd.read_sql_query(consulta8, conn)

display(resultado8)

resultado8.shape

resultado8.shape[0]

nomes_paises = []
contagem = []

for i in range(resultado8.shape[0]):
  try:
    coun = resultado8['region'].values[i]
    nomes_paises.append(pycountry.countries.get(alpha_2 = coun).name)
    contagem.append(resultado8['Number_of_movies'].values[i])
  except:
    continue

df_filmes_paises = pd.DataFrame()
df_filmes_paises['country'] = nomes_paises
df_filmes_paises['Movie_Count'] = contagem

df_filmes_paises = df_filmes_paises.sort_values(by = 'Movie_Count', ascending = False)

df_filmes_paises.head(10)

plt.figure(figsize = (20, 8))

sns.barplot(y = df_filmes_paises[:20].country, x = df_filmes_paises[:20].Movie_Count, orient = 'h')

for i in range(0, 20):
  plt.text(df_filmes_paises.Movie_Count[df_filmes_paises.index[i]] - 1,
           i + 0.30,
           round(df_filmes_paises['Movie_Count'][df_filmes_paises.index[i]], 2))
  
plt.ylabel('Países')
plt.xlabel('\nNúmero de Filmes')
plt.title('\nNúmero de Filmes Produzidos por País')
plt.show()

"""9ª consulta - Top 10 melhores filmes"""

consulta9 = '''
            select primary_title as Movie_Name, genres, rating
            from titles
            join ratings on titles.title_id = ratings.title_id
            where titles.type = 'movie' and ratings.votes >= 25000
            order by rating desc
            limit 10
            '''

top10_melhores_filmes = pd.read_sql_query(consulta9, conn)

display(top10_melhores_filmes)

"""10ª consulta - Top 10 piores filmes"""

consulta10 = '''
            select primary_title as Movie_Name, genres, rating
            from titles
            join ratings on titles.title_id = ratings.title_id
            where titles.type = 'movie' and ratings.votes >= 25000
            order by rating asc
            limit 10
            '''

top10_piores_filmes = pd.read_sql_query(consulta10, conn)

display(top10_piores_filmes)